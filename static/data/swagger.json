{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/v2/link/token": {
      "post": {
        "tags": [
          "link"
        ],
        "summary": "Generate Vital Link Token",
        "description": "Endpoint to generate a user link token, to be used throughout the vital\nlink process. The vital link token is a one time use token, that\nexpires after 10 minutes. If you would like vital-link widget to launch\nwith a specific provider, pass in a provider in the body. If you would\nlike to redirect to a custom url after successful or error connection,\npass in your own custom redirect_url parameter.",
        "operationId": "generate_vital_link_token_v2_link_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkTokenExchange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkTokenExchangeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/link/provider/oauth/{oauth_provider}": {
      "get": {
        "tags": [
          "link"
        ],
        "summary": "Get Oauth Provider",
        "description": "This endpoint generates an OAuth link for oauth provider",
        "operationId": "get_oauth_provider_v2_link_provider_oauth__oauth_provider__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OAuthProviders"
            },
            "name": "oauth_provider",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/link/provider/password/{provider}": {
      "post": {
        "tags": [
          "link"
        ],
        "summary": "Connect Individual Provider",
        "description": "This connects auth providers that are password based.",
        "operationId": "connect_individual_provider_v2_link_provider_password__provider__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Providers that require password auth, whoop, renpho, peloton, zwift",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PasswordProviders"
                }
              ]
            },
            "name": "provider",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualProviderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderLinkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/link/provider/email/{provider}": {
      "post": {
        "tags": [
          "link"
        ],
        "summary": "Connect Email Auth Provider",
        "description": "This connects auth providers that are email based.",
        "operationId": "connect_email_auth_provider_v2_link_provider_email__provider__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Email providers that require emails freestyle_auth",
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmailProviders"
                }
              ]
            },
            "name": "provider",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailProviderAuthLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/profile/{user_id}": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Profile",
        "description": "Get Daily profile for user_id",
        "operationId": "get_user_profile_v2_summary_profile__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "summary"
        ],
        "summary": "Post User Profile",
        "operationId": "post_user_profile_v2_summary_profile__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualProfileCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Profile V2 Summary Profile  User Id  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/profile/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Profile Raw",
        "description": "Get Daily profile for user_id",
        "operationId": "get_user_profile_raw_v2_summary_profile__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/devices/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Devices Raw",
        "description": "Get Devices for user_id",
        "operationId": "get_user_devices_raw_v2_summary_devices__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawDevices"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/activity/{user_id}": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Activity",
        "description": "Get Daily Activity for user_id",
        "operationId": "get_user_activity_v2_summary_activity__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientActivityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "summary"
        ],
        "summary": "Post User Activity",
        "operationId": "post_user_activity_v2_summary_activity__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualActivityCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Activity V2 Summary Activity  User Id  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/activity/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Activity Raw",
        "description": "Get Daily Activity for user_id",
        "operationId": "get_user_activity_raw_v2_summary_activity__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawActivity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/workouts/{user_id}": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Workouts",
        "description": "Get Daily workout for user_id",
        "operationId": "get_user_workouts_v2_summary_workouts__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientWorkoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "summary"
        ],
        "summary": "Post User Workout",
        "operationId": "post_user_workout_v2_summary_workouts__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualWorkoutCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Workout V2 Summary Workouts  User Id  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/workouts/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Workouts Raw",
        "description": "Get Daily workout for user_id",
        "operationId": "get_user_workouts_raw_v2_summary_workouts__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawWorkout"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/sleep/{user_id}": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Sleep",
        "description": "Get Daily sleep for user_id",
        "operationId": "get_user_sleep_v2_summary_sleep__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSleepResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "summary"
        ],
        "summary": "Post User Sleep",
        "operationId": "post_user_sleep_v2_summary_sleep__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualSleepCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Sleep V2 Summary Sleep  User Id  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/sleep/{user_id}/stream": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Sleep Stream",
        "description": "Get Daily sleep stream for user_id",
        "operationId": "get_user_sleep_stream_v2_summary_sleep__user_id__stream_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSleepResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/sleep/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Sleep Raw",
        "description": "Get Daily sleep for user_id",
        "operationId": "get_user_sleep_raw_v2_summary_sleep__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawSleep"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/body/{user_id}": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Body",
        "description": "Get Daily Body data for user_id",
        "operationId": "get_user_body_v2_summary_body__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientBodyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "summary"
        ],
        "summary": "Post User Body",
        "operationId": "post_user_body_v2_summary_body__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualBodyCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Body V2 Summary Body  User Id  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/summary/body/{user_id}/raw": {
      "get": {
        "tags": [
          "summary"
        ],
        "summary": "Get User Body Raw",
        "description": "Get Daily Body data for user_id",
        "operationId": "get_user_body_raw_v2_summary_body__user_id__raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawBody"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/sleep/{sleep_id}/stream": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get User Sleep Stream",
        "description": "Get Daily Activity for user_id",
        "operationId": "get_user_sleep_stream_v2_timeseries_sleep__sleep_id__stream_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Sleep Id",
              "type": "string"
            },
            "name": "sleep_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingSleepStream"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/workouts/{workout_id}/stream": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get User Workouts",
        "description": "Get Daily Activity for user_id",
        "operationId": "get_user_workouts_v2_timeseries_workouts__workout_id__stream_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Workout Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "workout_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingStream"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/blood_pressure": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Blood Pressure Data",
        "description": "Get blood pressure data for user.",
        "operationId": "get_blood_pressure_data_v2_timeseries__user_id__blood_pressure_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Blood Pressure Data V2 Timeseries  User Id  Blood Pressure Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientFacingBloodPressureTimeseries"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "timeseries"
        ],
        "summary": "Post User Blood Pressure",
        "operationId": "post_user_blood_pressure_v2_timeseries__user_id__blood_pressure_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualBloodPressureCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Blood Pressure V2 Timeseries  User Id  Blood Pressure Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/{resource}": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id___resource__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Timeseries Resource Data V2 Timeseries  User Id   Resource  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientFacingTimeseries"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "timeseries"
        ],
        "summary": "Post User Vitals",
        "operationId": "post_user_vitals_v2_timeseries__user_id___resource__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VitalsResource"
            },
            "name": "resource",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualTimeseriesCreationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Post User Vitals V2 Timeseries  User Id   Resource  Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/heartrate": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__heartrate_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/blood_oxygen": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__blood_oxygen_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/ige": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__ige_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/igg": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__igg_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/glucose": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__glucose_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/cholesterol/triglycerides": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_triglycerides_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/cholesterol/ldl": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_ldl_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/cholesterol/hdl": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_hdl_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/cholesterol/total": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_total_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/timeseries/{user_id}/cholesterol": {
      "get": {
        "tags": [
          "timeseries"
        ],
        "summary": "Get Timeseries Resource Data",
        "description": "Get timeseries data for user",
        "operationId": "get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeseriesResource"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "description": "Provider oura/strava etc.",
            "required": false,
            "schema": {
              "title": "Provider",
              "type": "string",
              "description": "Provider oura/strava etc.",
              "default": ""
            },
            "name": "provider",
            "in": "query"
          },
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": false,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Teams Users",
        "description": "GET All users for team.",
        "operationId": "get_teams_users_v2_user__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Teams Users V2 User  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientFacingUser"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create User",
        "description": "POST Create's a vital user given a client_user_id and returns the user_id",
        "operationId": "create_user_v2_user__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingUserKey"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/providers/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Connected Providers",
        "description": "GET Users connected providers",
        "operationId": "get_connected_providers_v2_user_providers__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Connected Providers V2 User Providers  User Id  Get",
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ClientFacingSource"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get User",
        "description": "GET User details given the user_id.",
        "operationId": "get_user_v2_user__user_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingUser"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete User",
        "operationId": "delete_user_v2_user__user_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/{user_id}/{provider}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deregister Provider",
        "operationId": "deregister_provider_v2_user__user_id___provider__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User id returned by vital create user id request. This id should be stored in your database against the user and used for all interactions with the vital api.",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Providers"
            },
            "name": "provider",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user/refresh/{user_id}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Refresh User Id",
        "description": "Trigger a manual refresh for a specific user",
        "operationId": "refresh_user_id_v2_user_refresh__user_id__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRefreshSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRefreshErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/providers/": {
      "get": {
        "tags": [
          "providers"
        ],
        "summary": "Get List Of Providers",
        "description": "Get Provider list",
        "operationId": "get_list_of_providers_v2_providers__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get List Of Providers V2 Providers  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientFacingSourceDetailed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Orders",
        "description": "Get testkit order for team",
        "operationId": "get_orders_v2_testkit_orders_get",
        "parameters": [
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "description": "Filter by user ID.",
            "required": false,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "Filter by user ID.",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "Filter by patient name.",
            "required": false,
            "schema": {
              "title": "Patient Name",
              "type": "string",
              "description": "Filter by patient name."
            },
            "name": "patient_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Create Order",
        "description": "POST Create User Order",
        "operationId": "create_order_v2_testkit_orders_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Orders",
        "description": "Get testkit order for team",
        "operationId": "get_orders_v2_testkit_orders__get",
        "parameters": [
          {
            "description": "Date from in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "Start Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date from in YYYY-MM-DD"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Date to in YYYY-MM-DD",
            "required": true,
            "schema": {
              "title": "End Date",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ],
              "description": "Date to in YYYY-MM-DD"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "description": "Filter by user ID.",
            "required": false,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "Filter by user ID.",
              "format": "uuid"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "Filter by patient name.",
            "required": false,
            "schema": {
              "title": "Patient Name",
              "type": "string",
              "description": "Filter by patient name."
            },
            "name": "patient_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Create Order",
        "description": "POST Create User Order",
        "operationId": "create_order_v2_testkit_orders__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrdersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Order",
        "description": "Get individual order",
        "operationId": "get_order_v2_testkit_orders__order_id__get",
        "parameters": [
          {
            "description": "Your Order ID.",
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "description": "Your Order ID.",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFacingOrder"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}/cancel": {
      "post": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Cancel Order",
        "description": "DELETE Delete User Order",
        "operationId": "cancel_order_v2_testkit_orders__order_id__cancel_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}/results": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Testkit Result",
        "description": "Get available test kits.",
        "operationId": "get_testkit_result_v2_testkit_orders__order_id__results_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}/test": {
      "post": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Test Testkit Process",
        "description": "Get available test kits.",
        "operationId": "test_testkit_process_v2_testkit_orders__order_id__test_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}/results/metadata": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Testkit Result Metadata",
        "description": "1. Get order result by order_id\n2. Return results as Lab Results Metadata and data as raw json",
        "operationId": "get_testkit_result_metadata_v2_testkit_orders__order_id__results_metadata_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabResultsMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/testkit/orders/{order_id}/results/raw": {
      "get": {
        "tags": [
          "testkit_orders"
        ],
        "summary": "Get Testkit Result Raw",
        "description": "1. Get order result by order_id\n2. Return results as Lab Results Metadata and data as raw json",
        "operationId": "get_testkit_result_raw_v2_testkit_orders__order_id__results_raw_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabResultsRaw"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityV2InDB": {
        "title": "ActivityV2InDB",
        "required": [
          "timestamp",
          "provider_id",
          "user_id",
          "source_id",
          "id"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "priority_id": {
            "title": "Priority Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          }
        }
      },
      "BiologicalSex": {
        "title": "BiologicalSex",
        "enum": [
          "not_set",
          "female",
          "male",
          "other"
        ],
        "description": "An enumeration."
      },
      "BodyV2InDB": {
        "title": "BodyV2InDB",
        "required": [
          "timestamp",
          "provider_id",
          "user_id",
          "source_id",
          "id"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "priority_id": {
            "title": "Priority Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          }
        }
      },
      "ClientActivityResponse": {
        "title": "Daily Activity",
        "required": [
          "activity"
        ],
        "type": "object",
        "properties": {
          "activity": {
            "title": "Activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingActivity"
            }
          }
        },
        "example": {
          "activity": [
            {
              "date": "2022-05-16",
              "calories_total": 100,
              "calories_active": 2000,
              "steps": 10000,
              "daily_movement": 200,
              "low": 6400,
              "medium": 6400,
              "high": 6000,
              "source": {
                "name": "Oura",
                "slug": "oura",
                "logo": "https://logo_url.com"
              },
              "user_id": "934b53c4-988c-4bdc-a2db-0be8b1c30d09"
            }
          ]
        }
      },
      "ClientBodyResponse": {
        "title": "ClientBodyResponse",
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "title": "Body",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingBody"
            }
          }
        },
        "example": {
          "body": [
            {
              "id": "702bd523-dd0b-42ee-8fcf-872766b89c55",
              "date": "2022-05-16",
              "weight": "80kg",
              "fat": "30%",
              "source": {
                "name": "Oura",
                "slug": "oura",
                "logo": "https://logo_url.com"
              },
              "user_id": "f3329a1e-7088-4cf4-9889-7a20f6e2dda3"
            }
          ]
        }
      },
      "ClientFacingActivity": {
        "title": "Daily Activity",
        "required": [
          "user_id",
          "id",
          "date",
          "source"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "Date for specified record",
            "format": "date-time"
          },
          "calories_total": {
            "title": "Calories Total",
            "type": "number",
            "description": "Total energy consumption during the day including Basal Metabolic Rate in kilocalories.::kilocalories"
          },
          "calories_active": {
            "title": "Calories Active",
            "type": "number",
            "description": "Energy consumption caused by the physical activity of the day in kilocalories.::kilocalories"
          },
          "steps": {
            "title": "Steps",
            "type": "integer",
            "description": "Total number of steps registered during the day.::steps"
          },
          "daily_movement": {
            "title": "Daily Movement",
            "type": "number",
            "description": "Daily physical activity as equal meters i.e. amount of walking needed to get the same amount of activity.::meters"
          },
          "low": {
            "title": "Low",
            "type": "number",
            "description": "Number of minutes during the day with low intensity activity (e.g. household work).::minutes"
          },
          "medium": {
            "title": "Medium",
            "type": "number",
            "description": "Number of minutes during the day with medium intensity activity (e.g. walking).::minutes"
          },
          "high": {
            "title": "High",
            "type": "number",
            "description": "Number of minutes during the day with high intensity activity (e.g. running).::minutes"
          },
          "source": {
            "title": "Source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientFacingSource"
              }
            ],
            "description": "Source the data has come from."
          }
        },
        "example": {
          "date": "2022-05-16",
          "calories_total": 100,
          "calories_active": 2000,
          "steps": 10000,
          "daily_movement": 200,
          "low": 6400,
          "medium": 6400,
          "high": 6000,
          "source": {
            "name": "Oura",
            "slug": "oura",
            "logo": "https://logo_url.com"
          },
          "user_id": "b4fa21a1-711e-48b5-ab21-e76ff10eee3b"
        }
      },
      "ClientFacingBloodPressureTimeseries": {
        "title": "ClientFacingBloodPressureTimeseries",
        "required": [
          "timestamp",
          "systolic",
          "diastolic",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "systolic": {
            "title": "Systolic",
            "type": "number"
          },
          "diastolic": {
            "title": "Diastolic",
            "type": "number"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        },
        "example": {
          "id": 2,
          "timestamp": "2022-05-16T11:31:30.671163+00:00",
          "systolic": "125",
          "diastolic": "75",
          "type": "cuff",
          "unit": "mmHg"
        }
      },
      "ClientFacingBody": {
        "title": "ClientFacingBody",
        "required": [
          "user_id",
          "id",
          "date",
          "source"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date-time"
          },
          "weight": {
            "title": "Weight",
            "type": "number"
          },
          "fat": {
            "title": "Fat",
            "type": "number"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          }
        }
      },
      "ClientFacingOrder": {
        "title": "ClientFacingOrder",
        "required": [
          "user_id",
          "team_id",
          "created_on",
          "updated_on",
          "testkit_id",
          "testkit",
          "patient_address",
          "patient_details"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The Vital Order ID",
            "format": "uuid"
          },
          "team_id": {
            "title": "Team Id",
            "type": "string",
            "description": "Your team id.",
            "format": "uuid"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "When your order was created",
            "format": "date-time"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string",
            "description": "When your order status was last updated",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              }
            ],
            "description": "Order status: ordered, transit_customer, out_for_delivery, with_customer, transit_lab, delivered_to_lab, processing_lab, completed, failure_to_deliver_to_customer, failure_to_deliver_to_lab, cancelled, do_not_process, unknown"
          },
          "testkit_id": {
            "title": "Testkit Id",
            "type": "string",
            "description": "Testkit id",
            "format": "uuid"
          },
          "testkit": {
            "$ref": "#/components/schemas/TestkitClientFacing"
          },
          "inbound_tracking_number": {
            "title": "Inbound Tracking Number",
            "type": "string",
            "description": "Tracking number for delivery to lab"
          },
          "outbound_tracking_number": {
            "title": "Outbound Tracking Number",
            "type": "string",
            "description": "Tracking number for delivery to customer"
          },
          "inbound_tracking_url": {
            "title": "Inbound Tracking Url",
            "type": "string",
            "description": "Tracking url for delivery to lab"
          },
          "outbound_tracking_url": {
            "title": "Outbound Tracking Url",
            "type": "string",
            "description": "Tracking url for delivery to customer"
          },
          "outbound_courier": {
            "title": "Outbound Courier",
            "type": "string",
            "description": "Courier used for delivery to customer"
          },
          "inbound_courier": {
            "title": "Inbound Courier",
            "type": "string",
            "description": "Courier used for delivery to lab"
          },
          "patient_address": {
            "title": "Patient Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatientAddress"
              }
            ],
            "description": "Patient Address"
          },
          "patient_details": {
            "title": "Patient Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatientDetails"
              }
            ],
            "description": "Patient Details"
          },
          "sample_id": {
            "title": "Sample Id",
            "type": "string",
            "description": "Sample ID"
          }
        },
        "example": {
          "id": "9491aab5-2e6f-418b-a674-84e2c3d1847e",
          "team_id": "ae410349-e455-4a6e-8230-50730695d370",
          "created_on": "2022-05-16T11:31:30.601542+00:00",
          "updated_on": "2022-05-16T11:31:30.601566+00:00",
          "status": "ordered",
          "user_id": "b0a31ada-3bd5-4f1c-9f31-db08f3601ad0",
          "testkit_id": "f374410d-ad81-45c7-b3b3-3f4bfdd5b775",
          "inbound_tracking_number": "<inbound_tracking_number>",
          "outbound_tracking_number": "<outbound_tracking_number>",
          "inbound_tracking_url": "<inbound_tracking_urlr>",
          "outbound_tracking_url": "<outbound_tracking_url>",
          "outbound_courier": "usps",
          "inbound_courier": "usps",
          "testkit": {
            "name": "CGM",
            "description": "Glucose CGM"
          }
        }
      },
      "ClientFacingProfile": {
        "title": "ClientFacingProfile",
        "required": [
          "user_id",
          "id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          },
          "gender": {
            "title": "Gender",
            "type": "string"
          },
          "dob": {
            "title": "Dob",
            "type": "string"
          },
          "age": {
            "title": "Age",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          }
        },
        "example": {
          "id": "245c0845-700c-4081-88e7-ae0a446529cc",
          "date": "2022-05-16",
          "age": 28,
          "height": 183,
          "gender": "male",
          "source": {
            "name": "Oura",
            "slug": "oura",
            "logo": "https://logo_url.com"
          },
          "user_id": "733ce9d6-0b31-44d8-982f-19afb5d97c97"
        }
      },
      "ClientFacingSleep": {
        "title": "Body Composition Data",
        "required": [
          "user_id",
          "id",
          "date",
          "bedtime_start",
          "bedtime_stop",
          "duration",
          "total",
          "awake",
          "light",
          "rem",
          "deep",
          "source"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "Date for specified record",
            "format": "date-time"
          },
          "bedtime_start": {
            "title": "Bedtime Start",
            "type": "string",
            "description": "UTC Time when the sleep period started",
            "format": "date-time"
          },
          "bedtime_stop": {
            "title": "Bedtime Stop",
            "type": "string",
            "description": "UTC Time when the sleep period ended",
            "format": "date-time"
          },
          "timezone_offset": {
            "title": "Timezone Offset",
            "type": "integer",
            "description": "Timezone offset from UTC as minutes. For example, EEST (Eastern European Summer Time, +3h) is 180. PST (Pacific Standard Time, -8h) is -480"
          },
          "duration": {
            "title": "Duration",
            "type": "integer",
            "description": "Total duration of the sleep period (sleep.duration = sleep.bedtime_end - sleep.bedtime_start).::seconds"
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total amount of sleep registered during the sleep period (sleep.total = sleep.rem + sleep.light + sleep.deep).::seconds"
          },
          "awake": {
            "title": "Awake",
            "type": "integer",
            "description": "Total amount of awake time registered during the sleep period.::seconds"
          },
          "light": {
            "title": "Light",
            "type": "integer",
            "description": "Total amount of light sleep registered during the sleep period::seconds"
          },
          "rem": {
            "title": "Rem",
            "type": "integer",
            "description": "Total amount of REM sleep registered during the sleep period, minutes::seconds"
          },
          "deep": {
            "title": "Deep",
            "type": "integer",
            "description": "Total amount of deep (N3) sleep registered during the sleep period::seconds"
          },
          "hr_lowest": {
            "title": "Hr Lowest",
            "type": "integer",
            "description": "The lowest heart rate (5 minutes sliding average) registered during the sleep period.::beats per minute"
          },
          "hr_average": {
            "title": "Hr Average",
            "type": "integer",
            "description": "The average heart rate registered during the sleep period.::beats per minute"
          },
          "efficiency": {
            "title": "Efficiency",
            "type": "number",
            "description": "Sleep efficiency is the percentage of the sleep period spent asleep (100% * sleep.total / sleep.duration).::perc"
          },
          "latency": {
            "title": "Latency",
            "type": "integer",
            "description": "Detected latency from bedtime_start to the beginning of the first five minutes of persistent sleep.::seconds"
          },
          "temperature_delta": {
            "title": "Temperature Delta",
            "type": "number",
            "description": "Skin temperature deviation from the long-term temperature average.::celcius"
          },
          "average_hrv": {
            "title": "Average Hrv",
            "type": "number",
            "description": "The average heart rate registered during the sleep period.::beats per minute"
          },
          "respiratory_rate": {
            "title": "Respiratory Rate",
            "type": "number",
            "description": "Average respiratory rate.::breaths per minute"
          },
          "source": {
            "title": "Source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientFacingSource"
              }
            ],
            "description": "Source the data has come from."
          },
          "sleep_stream": {
            "title": "Sleep Stream",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientFacingSleepStream"
              }
            ],
            "description": "Hypnogram for sleep stages {\"deep\": 1, \"light\": 2, \"rem\": 3, \"awake\": 4, \"missing_data\": -1}"
          }
        },
        "example": {
          "id": "f2b5e843-4bf3-47ce-9b47-4385632d55c3",
          "date": "2022-05-16",
          "bedtime_start": "2022-05-16T11:31:30.392704+00:00",
          "bedtime_stop": "2022-05-16T11:31:30.392711+00:00",
          "timezone_offset": 2400,
          "duration": 28800,
          "total": 28800,
          "awake": 2400,
          "light": 2400,
          "rem": 2400,
          "deep": 2400,
          "hr_lowest": 43,
          "hr_average": 50,
          "efficiency": 0.97,
          "latency": 1000,
          "temperature_delta": -0.2,
          "average_hrv": 78,
          "respiratory_rate": 14,
          "source": {
            "name": "Oura",
            "slug": "oura",
            "logo": "https://logo_url.com"
          },
          "user_id": "8a4b3d8a-be83-4e78-a573-b4869c7bd319"
        }
      },
      "ClientFacingSleepStream": {
        "title": "Sleep stream data",
        "type": "object",
        "properties": {
          "hrv": {
            "title": "Hrv",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingTimeseries"
            }
          },
          "heartrate": {
            "title": "Heartrate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingTimeseries"
            }
          },
          "hypnogram": {
            "title": "Hypnogram",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingTimeseries"
            }
          },
          "respiratory_rate": {
            "title": "Respiratory Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingTimeseries"
            }
          }
        },
        "example": {
          "hrv": [
            14,
            12,
            13,
            12
          ],
          "heartrate": [
            50,
            60,
            70,
            60
          ],
          "hypnogram": [
            1,
            2,
            3,
            4,
            5
          ],
          "respiratory_rate": [
            14.1,
            14.2,
            13.2,
            12.5
          ]
        }
      },
      "ClientFacingSource": {
        "title": "Provider",
        "required": [
          "name",
          "slug",
          "logo"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of source of information"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "Slug for designated source"
          },
          "logo": {
            "title": "Logo",
            "type": "string",
            "description": "URL for source logo"
          }
        },
        "example": {
          "name": "Oura",
          "slug": "oura",
          "logo": "https://logo_url.com"
        }
      },
      "ClientFacingSourceDetailed": {
        "title": "Provider",
        "required": [
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of source of information"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "Slug for designated source"
          },
          "logo": {
            "title": "Logo",
            "type": "string",
            "description": "URL for source logo"
          },
          "auth_type": {
            "title": "Auth Type",
            "type": "string"
          },
          "supported_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "default": []
          }
        },
        "example": {
          "name": "Oura",
          "slug": "oura",
          "logo": "https://logo_url.com",
          "auth_type": "oauth",
          "supported_resources": [
            "workouts",
            "sleep"
          ]
        }
      },
      "ClientFacingSport": {
        "title": "ClientFacingSport",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "ClientFacingStream": {
        "title": "ClientFacingStream",
        "type": "object",
        "properties": {
          "cadence": {
            "title": "Cadence",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "RPM for cycling, Steps per minute for running",
            "default": []
          },
          "time": {
            "title": "Time",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Corresponding time stamp in unix time for datapoint",
            "default": []
          },
          "altitude": {
            "title": "Altitude",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Data points for altitude",
            "default": []
          },
          "velocity_smooth": {
            "title": "Velocity Smooth",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Velocity in m/s",
            "default": []
          },
          "heartrate": {
            "title": "Heartrate",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Heart rate in bpm.",
            "default": []
          },
          "lat": {
            "title": "Lat",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Latitude for data point",
            "default": []
          },
          "lng": {
            "title": "Lng",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Longitude for data point.",
            "default": []
          },
          "distance": {
            "title": "Distance",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Cumulated distance for exercise.",
            "default": []
          },
          "power": {
            "title": "Power",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Power in watts",
            "default": []
          },
          "resistance": {
            "title": "Resistance",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Resistance on bike",
            "default": []
          }
        },
        "example": {
          "cadence": [
            10,
            12,
            12,
            11,
            10
          ],
          "time": [
            1626625123,
            1626625140,
            1626625145,
            1626625150,
            162662560
          ],
          "heartrate": [
            120,
            125,
            125,
            130,
            135
          ],
          "distance": [
            12,
            15,
            18,
            20,
            25
          ],
          "power": [
            100,
            100,
            100,
            100,
            100
          ],
          "altitude": [
            10,
            20,
            30,
            40,
            50
          ],
          "velocity_smooth": [
            10,
            20,
            30,
            40,
            50
          ],
          "lat": [
            10,
            20,
            30,
            40,
            50
          ],
          "lng": [
            10,
            20,
            30,
            40,
            50
          ],
          "resistance": [
            10,
            20,
            30,
            40,
            50
          ]
        }
      },
      "ClientFacingTimeseries": {
        "title": "ClientFacingTimeseries",
        "required": [
          "timestamp",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        },
        "example": {
          "glucose": {
            "id": 2,
            "timestamp": "2022-05-16T11:31:30.385280+00:00",
            "value": "0.50",
            "type": "automatic | manual_scan",
            "unit": "mg/dL"
          },
          "cholesterol/ldl": {
            "id": 3,
            "timestamp": "2022-05-16T11:31:30.385294+00:00",
            "value": "0.60",
            "type": "ldl",
            "unit": "mg/dL"
          },
          "cholesterol/hdl": {
            "id": 92,
            "timestamp": "2022-05-16T11:31:30.385300+00:00",
            "value": "0.20",
            "type": "hdl",
            "unit": "mg/dL"
          },
          "cholesterol/total": {
            "id": 8,
            "timestamp": "2022-05-16T11:31:30.385304+00:00",
            "value": "0.70",
            "type": "total",
            "unit": "mg/dL"
          },
          "cholesterol/triglycerides": {
            "id": 100,
            "timestamp": "2022-05-16T11:31:30.385308+00:00",
            "value": "0.70",
            "type": "triglycerides",
            "unit": "mg/dL"
          },
          "heartrate": {
            "id": 123,
            "timestamp": "2022-05-16T11:31:30.385312+00:00",
            "value": "70",
            "type": "automatic",
            "unit": "bpm"
          },
          "ige": {
            "id": 232,
            "timestamp": "2022-05-16T11:31:30.385316+00:00",
            "value": "70",
            "type": "baha_grass",
            "unit": "FSU"
          },
          "igg": {
            "id": 235,
            "timestamp": "2022-05-16T11:31:30.385320+00:00",
            "value": "12.0",
            "type": "dairy",
            "unit": "FSU"
          }
        }
      },
      "ClientFacingUser": {
        "title": "User",
        "required": [
          "user_id",
          "team_id",
          "client_user_id",
          "created_on",
          "connected_sources"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "team_id": {
            "title": "Team Id",
            "type": "string",
            "description": "Your team id.",
            "format": "uuid"
          },
          "client_user_id": {
            "title": "Client User Id",
            "type": "string",
            "description": "A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id."
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "When your item is created",
            "format": "date-time"
          },
          "connected_sources": {
            "title": "Connected Sources",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedSourceClientFacing"
            },
            "description": "A list of the users connected sources."
          }
        },
        "example": {
          "user_id": "c7266546-7793-4e59-b527-17f897d70ddd",
          "team_id": "c6dddfd3-76b2-4983-9739-be69e85eb52d",
          "client_user_id": "ae98be4e-ffda-4b23-8851-63388814075e",
          "connected_sources": [
            {
              "source": {
                "name": "Oura",
                "slug": "oura",
                "logo": "logo_url"
              }
            }
          ]
        }
      },
      "ClientFacingUserKey": {
        "title": "ClientFacingUserKey",
        "required": [
          "user_id",
          "client_user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "client_user_id": {
            "title": "Client User Id",
            "type": "string",
            "description": "A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id."
          }
        },
        "example": {
          "client_user_id": "afd218b8-776e-4419-b6ef-08b2f26824a1",
          "user_id": "1f0acc2d-d8c7-4504-b006-1ad719288bff"
        }
      },
      "ClientFacingWorkout": {
        "title": "Workout Data",
        "required": [
          "user_id",
          "id",
          "time_start",
          "time_end",
          "calories",
          "sport",
          "hr_zones",
          "provider_id",
          "source"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User key returned by vital create user key request. This key should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid",
            "deprecated": true
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Title given for the workout"
          },
          "average_hr": {
            "title": "Average Hr",
            "type": "integer",
            "description": "Average heart rate during workout::bpm"
          },
          "max_hr": {
            "title": "Max Hr",
            "type": "integer",
            "description": "Max heart rate during workout::bpm"
          },
          "distance": {
            "title": "Distance",
            "type": "number",
            "description": "Cumulated distance for exercise.",
            "default": []
          },
          "time_start": {
            "title": "Time Start",
            "type": "string",
            "description": "Start time of the workout::time",
            "format": "date-time"
          },
          "time_end": {
            "title": "Time End",
            "type": "string",
            "description": "End time of the workout::time",
            "format": "date-time"
          },
          "calories": {
            "title": "Calories",
            "type": "number",
            "description": "Calories burned during the workout::kCal"
          },
          "sport": {
            "$ref": "#/components/schemas/ClientFacingSport"
          },
          "hr_zones": {
            "title": "Hr Zones",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Time in minutes spent in different heart rate zones <50%, 50-60%, 60-70%, 70-80%, 80-90%, 90%+::seconds"
          },
          "moving_time": {
            "title": "Moving Time",
            "type": "integer",
            "description": "Time spent active during the workout::seconds"
          },
          "total_elevation_gain": {
            "title": "Total Elevation Gain",
            "type": "number",
            "description": "Elevation gain during the workout::meters"
          },
          "elev_high": {
            "title": "Elev High",
            "type": "number",
            "description": "Highest point of elevation::meters"
          },
          "elev_low": {
            "title": "Elev Low",
            "type": "number",
            "description": "Lowest point of elevation::meters"
          },
          "average_speed": {
            "title": "Average Speed",
            "type": "number",
            "description": "Average speed during workout in m/s::meters/sec"
          },
          "max_speed": {
            "title": "Max Speed",
            "type": "number",
            "description": "Max speed during workout in m/s::meters/sec"
          },
          "average_watts": {
            "title": "Average Watts",
            "type": "number",
            "description": "Average watts burned during exercise::watts"
          },
          "device_watts": {
            "title": "Device Watts",
            "type": "number",
            "description": "Watts burned during exercise::watts"
          },
          "max_watts": {
            "title": "Max Watts",
            "type": "number",
            "description": "Max watts burned during exercise::watts"
          },
          "weighted_average_watts": {
            "title": "Weighted Average Watts",
            "type": "number",
            "description": "Weighted average watts burned during exercise::watts"
          },
          "map": {
            "title": "Map",
            "type": "object",
            "description": "Map of workouts encoded as polyline"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string",
            "description": "Provider ID given for that specific workout"
          },
          "source": {
            "title": "Source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientFacingSource"
              }
            ],
            "description": "Source the data has come from."
          }
        },
        "example": {
          "id": "8683a6d0-4992-4e34-b10f-99203b2cca2b",
          "average_hr": 100,
          "max_hr": 190,
          "distance": 1700,
          "time_start": "2022-05-16T10:31:30.428642+00:00",
          "time_end": "2022-05-16T11:31:30.428693+00:00",
          "calories": 300,
          "sport": {
            "id": 1,
            "name": "football"
          },
          "source": {
            "name": "Strava",
            "slug": "strava",
            "logo": "https://logo_url.com"
          },
          "hr_zones": [
            100,
            90,
            10,
            10,
            200
          ],
          "user_id": "59dbfddc-3e9e-4446-ac4a-82b574a8b4be",
          "moving_time": 100,
          "total_elevation_gain": 10,
          "elev_high": 20.2,
          "elev_low": -10.2,
          "average_speed": 4.2,
          "max_speed": 7.8,
          "average_watts": 100,
          "device_watts": 80,
          "max_watts": 200,
          "weighted_average_watts": 250,
          "map": {
            "summary_polyline": "agn~Ftb{uOvr@daBunBjdBkHwiD????~Ngn@ha@_N~Ql`@"
          }
        }
      },
      "ClientSleepResponse": {
        "title": "Body Composition Data",
        "required": [
          "sleep"
        ],
        "type": "object",
        "properties": {
          "sleep": {
            "title": "Sleep",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingSleep"
            }
          }
        },
        "example": {
          "sleep": [
            {
              "id": "71bc4ca1-9ce0-48c8-a28a-71900cc873f5",
              "date": "2022-05-16",
              "bedtime_start": "2022-05-16T11:31:30.395838+00:00",
              "bedtime_stop": "2022-05-16T11:31:30.395848+00:00",
              "timezone_offset": 2400,
              "duration": 28800,
              "total": 28800,
              "awake": 2400,
              "light": 2400,
              "rem": 2400,
              "deep": 2400,
              "hr_lowest": 43,
              "hr_average": 50,
              "efficiency": 0.97,
              "latency": 1000,
              "temperature_delta": -0.2,
              "average_hrv": 78,
              "respiratory_rate": 14,
              "source": {
                "name": "Oura",
                "slug": "oura",
                "logo": "https://logo_url.com"
              },
              "user_id": "145bcaa5-d5e5-42b0-8696-6f339c304e5f"
            }
          ]
        }
      },
      "ClientWorkoutResponse": {
        "title": "ClientWorkoutResponse",
        "required": [
          "workouts"
        ],
        "type": "object",
        "properties": {
          "workouts": {
            "title": "Workouts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingWorkout"
            }
          }
        },
        "example": {
          "workouts": {
            "id": "b34f9ef9-9bdf-4058-9f87-62dbd271bb57",
            "average_hr": 100,
            "max_hr": 190,
            "distance": 1700,
            "time_start": "2022-05-16T10:31:30.429809+00:00",
            "time_end": "2022-05-16T11:31:30.429840+00:00",
            "calories": 300,
            "sport": {
              "id": 1,
              "name": "football"
            },
            "source": {
              "name": "Strava",
              "slug": "strava",
              "logo": "https://logo_url.com"
            },
            "hr_zones": [
              100,
              90,
              10,
              10,
              200
            ],
            "user_id": "b68c61cd-f9c4-4b7c-a0cb-57fc1347be82",
            "moving_time": 100,
            "total_elevation_gain": 10,
            "elev_high": 20.2,
            "elev_low": -10.2,
            "average_speed": 4.2,
            "max_speed": 7.8,
            "average_watts": 100,
            "device_watts": 80,
            "max_watts": 200,
            "weighted_average_watts": 250,
            "map": {
              "summary_polyline": "agn~Ftb{uOvr@daBunBjdBkHwiD????"
            }
          },
          "title": "Workout Data"
        }
      },
      "ConnectedSourceClientFacing": {
        "title": "ConnectedSourceClientFacing",
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "title": "Source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientFacingSource"
              }
            ],
            "description": "Source the data has come from."
          }
        }
      },
      "ConnectionStatus": {
        "title": "ConnectionStatus",
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "type": "boolean"
          }
        },
        "example": {
          "sucess": true
        }
      },
      "DataStage": {
        "title": "DataStage",
        "enum": [
          "daily",
          "historical"
        ],
        "description": "An enumeration."
      },
      "DeviceV2InDB": {
        "title": "DeviceV2InDB",
        "required": [
          "provider_id",
          "user_id",
          "source_id",
          "id"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          }
        }
      },
      "EmailProviderAuthLink": {
        "title": "EmailProviderAuthLink",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/Providers"
          }
        }
      },
      "EmailProviders": {
        "title": "EmailProviders",
        "enum": [
          "freestyle_libre"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IndividualProviderData": {
        "title": "IndividualProviderData",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string",
            "description": "Username for provider"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "description": "Password for provider"
          }
        }
      },
      "LabResultsMetadata": {
        "title": "LabResultsMetadata",
        "required": [
          "age",
          "dob",
          "patient",
          "date_reported",
          "date_collected",
          "specimen_number"
        ],
        "type": "object",
        "properties": {
          "age": {
            "title": "Age",
            "type": "string"
          },
          "dob": {
            "title": "Dob",
            "type": "string"
          },
          "clia_#": {
            "title": "Clia #",
            "type": "string"
          },
          "patient": {
            "title": "Patient",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "laboratory": {
            "title": "Laboratory",
            "type": "string"
          },
          "date_reported": {
            "title": "Date Reported",
            "type": "string"
          },
          "date_collected": {
            "title": "Date Collected",
            "type": "string"
          },
          "specimen_number": {
            "title": "Specimen Number",
            "type": "string"
          },
          "date_received": {
            "title": "Date Received",
            "type": "string"
          }
        }
      },
      "LabResultsRaw": {
        "title": "LabResultsRaw",
        "required": [
          "metadata",
          "results"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/LabResultsMetadata"
          },
          "results": {
            "title": "Results",
            "type": "object"
          }
        }
      },
      "LinkTokenExchange": {
        "title": "LinkTokenExchange",
        "required": [
          "user_key"
        ],
        "type": "object",
        "properties": {
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          },
          "provider": {
            "$ref": "#/components/schemas/Providers"
          },
          "redirect_url": {
            "title": "Redirect Url",
            "type": "string"
          }
        }
      },
      "LinkTokenExchangeResponse": {
        "title": "LinkTokenExchangeResponse",
        "required": [
          "link_token"
        ],
        "type": "object",
        "properties": {
          "link_token": {
            "title": "Link Token",
            "type": "string",
            "description": "Link token to use to launch link widget"
          }
        },
        "example": {
          "link_token": "dGVzdCB0ZXN0IHRlc3Q="
        }
      },
      "ManualActivityCreation": {
        "title": "ManualActivityCreation",
        "required": [
          "date",
          "active_energy_burned",
          "exercise_time",
          "standing_time",
          "move_time",
          "basal_energy_burned",
          "steps",
          "distance_walking_running",
          "vo2_max"
        ],
        "type": "object",
        "properties": {
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date-time"
          },
          "active_energy_burned": {
            "title": "Active Energy Burned",
            "type": "number"
          },
          "exercise_time": {
            "title": "Exercise Time",
            "type": "number"
          },
          "standing_time": {
            "title": "Standing Time",
            "type": "number"
          },
          "move_time": {
            "title": "Move Time",
            "type": "number"
          },
          "basal_energy_burned": {
            "title": "Basal Energy Burned",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "steps": {
            "title": "Steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "distance_walking_running": {
            "title": "Distance Walking Running",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "vo2_max": {
            "title": "Vo2 Max",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          }
        }
      },
      "ManualActivityCreationPayload": {
        "title": "ManualActivityCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualActivityCreation"
            }
          }
        }
      },
      "ManualBloodPressureCreation": {
        "title": "ManualBloodPressureCreation",
        "required": [
          "diastolic",
          "systolic"
        ],
        "type": "object",
        "properties": {
          "diastolic": {
            "$ref": "#/components/schemas/QuantitySample"
          },
          "systolic": {
            "$ref": "#/components/schemas/QuantitySample"
          },
          "pulse": {
            "$ref": "#/components/schemas/QuantitySample"
          }
        }
      },
      "ManualBloodPressureCreationPayload": {
        "title": "ManualBloodPressureCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualBloodPressureCreation"
            }
          }
        }
      },
      "ManualBodyCreationIntermediate": {
        "title": "ManualBodyCreationIntermediate",
        "required": [
          "body_mass",
          "body_fat_percentage"
        ],
        "type": "object",
        "properties": {
          "body_mass": {
            "title": "Body Mass",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "body_fat_percentage": {
            "title": "Body Fat Percentage",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          }
        }
      },
      "ManualBodyCreationPayload": {
        "title": "ManualBodyCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/ManualBodyCreationIntermediate"
          }
        }
      },
      "ManualProfileCreation": {
        "title": "ManualProfileCreation",
        "type": "object",
        "properties": {
          "biological_sex": {
            "$ref": "#/components/schemas/BiologicalSex"
          },
          "date_of_birth": {
            "title": "Date Of Birth",
            "type": "string",
            "format": "date-time"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        }
      },
      "ManualProfileCreationPayload": {
        "title": "ManualProfileCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/ManualProfileCreation"
          }
        }
      },
      "ManualProviders": {
        "title": "ManualProviders",
        "enum": [
          "beurer_ble",
          "omron_ble",
          "accuchek_ble",
          "contour_ble",
          "apple_health_kit",
          "manual"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ManualSleepCreation": {
        "title": "ManualSleepCreation",
        "required": [
          "id",
          "start_date",
          "end_date",
          "heart_rate",
          "resting_heart_rate",
          "heart_rate_variability",
          "oxygen_saturation",
          "respiratory_rate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "source_bundle": {
            "title": "Source Bundle",
            "type": "string"
          },
          "heart_rate": {
            "title": "Heart Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "resting_heart_rate": {
            "title": "Resting Heart Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "heart_rate_variability": {
            "title": "Heart Rate Variability",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "oxygen_saturation": {
            "title": "Oxygen Saturation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          },
          "respiratory_rate": {
            "title": "Respiratory Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          }
        }
      },
      "ManualSleepCreationPayload": {
        "title": "ManualSleepCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualSleepCreation"
            }
          }
        }
      },
      "ManualTimeseriesCreationPayload": {
        "title": "ManualTimeseriesCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            }
          }
        }
      },
      "ManualWorkoutCreation": {
        "title": "ManualWorkoutCreation",
        "required": [
          "id",
          "start_date",
          "end_date",
          "sport",
          "calories",
          "distance"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "source_bundle": {
            "title": "Source Bundle",
            "type": "string"
          },
          "sport": {
            "title": "Sport",
            "type": "string"
          },
          "calories": {
            "title": "Calories",
            "type": "number"
          },
          "distance": {
            "title": "Distance",
            "type": "number"
          },
          "heart_rate": {
            "title": "Heart Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            },
            "default": []
          },
          "respiratory_rate": {
            "title": "Respiratory Rate",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantitySample"
            },
            "default": []
          }
        }
      },
      "ManualWorkoutCreationPayload": {
        "title": "ManualWorkoutCreationPayload",
        "required": [
          "stage",
          "provider",
          "data"
        ],
        "type": "object",
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/DataStage"
          },
          "provider": {
            "$ref": "#/components/schemas/ManualProviders"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualWorkoutCreation"
            }
          }
        }
      },
      "MarkerClientFacing": {
        "title": "MarkerClientFacing",
        "required": [
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "OAuthProviders": {
        "title": "OAuthProviders",
        "enum": [
          "oura",
          "fitbit",
          "garmin",
          "strava",
          "wahoo",
          "ihealth",
          "withings",
          "google_fit"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "OrderResponse": {
        "title": "OrderResponse",
        "required": [
          "order",
          "status",
          "message"
        ],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/ClientFacingOrder"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "OrderStatus": {
        "title": "OrderStatus",
        "enum": [
          "ordered",
          "transit_customer",
          "out_for_delivery",
          "with_customer",
          "transit_lab",
          "delivered_to_lab",
          "processing_lab",
          "completed",
          "failure_to_deliver_to_customer",
          "failure_to_deliver_to_lab",
          "cancelled",
          "do_not_process",
          "unknown"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "OrdersRequest": {
        "title": "OrdersRequest",
        "required": [
          "testkit_id",
          "patient_address",
          "patient_details",
          "user_key"
        ],
        "type": "object",
        "properties": {
          "testkit_id": {
            "title": "Testkit Id",
            "type": "string",
            "description": "Testkit id",
            "format": "uuid"
          },
          "patient_address": {
            "$ref": "#/components/schemas/PatientAddress"
          },
          "patient_details": {
            "$ref": "#/components/schemas/PatientDetails"
          },
          "physician": {
            "$ref": "#/components/schemas/Physician"
          },
          "inbound_tracking_number": {
            "title": "Inbound Tracking Number",
            "type": "string"
          },
          "outbound_tracking_number": {
            "title": "Outbound Tracking Number",
            "type": "string"
          },
          "outbound_courier": {
            "title": "Outbound Courier",
            "type": "string"
          },
          "inbound_courier": {
            "title": "Inbound Courier",
            "type": "string"
          },
          "user_key": {
            "title": "User Key",
            "type": "string",
            "description": "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.",
            "format": "uuid"
          }
        }
      },
      "OrdersResponse": {
        "title": "OrdersResponse",
        "required": [
          "orders",
          "total",
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "orders": {
            "title": "Orders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFacingOrder"
            }
          },
          "total": {
            "title": "Total",
            "type": "integer"
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "size": {
            "title": "Size",
            "type": "integer"
          }
        },
        "example": {
          "orders": [
            {
              "id": "987b78dc-11e8-49a5-85e9-ec68261bf6b8",
              "team_id": "d518039b-ae58-4334-a7ae-0cb70e758925",
              "created_on": "2022-05-16T11:31:30.603953+00:00",
              "updated_on": "2022-05-16T11:31:30.603963+00:00",
              "status": "ordered",
              "user_id": "c08c56df-5f9d-4f70-a25a-3161d2beca0a",
              "testkit_id": "1fac56a6-20ee-42b6-9f89-43cf6b1a7ffb",
              "testkit": {
                "name": "CGM",
                "description": "Glucose CGM"
              }
            }
          ],
          "total": 14,
          "page": 1,
          "size": 50
        }
      },
      "PasswordProviders": {
        "title": "PasswordProviders",
        "enum": [
          "whoop",
          "renpho",
          "peloton",
          "zwift",
          "eight_sleep",
          "beurer_api"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PatientAddress": {
        "title": "PatientAddress",
        "required": [
          "receiver_name",
          "street",
          "city",
          "state",
          "zip",
          "country",
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "receiver_name": {
            "title": "Receiver Name",
            "type": "string"
          },
          "street": {
            "title": "Street",
            "type": "string"
          },
          "street_number": {
            "title": "Street Number",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "state": {
            "title": "State",
            "type": "string"
          },
          "zip": {
            "title": "Zip",
            "type": "string"
          },
          "country": {
            "title": "Country",
            "type": "string"
          },
          "phone_number": {
            "title": "Phone Number",
            "type": "string"
          }
        }
      },
      "PatientDetails": {
        "title": "PatientDetails",
        "required": [
          "dob",
          "gender"
        ],
        "type": "object",
        "properties": {
          "dob": {
            "title": "Dob",
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "title": "Gender",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        }
      },
      "Physician": {
        "title": "Physician",
        "required": [
          "first_name",
          "last_name",
          "npi",
          "id"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "npi": {
            "title": "Npi",
            "type": "string"
          },
          "licensed_states": {
            "title": "Licensed States",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "id": {
            "title": "Id",
            "type": "integer"
          }
        }
      },
      "ProfileInDb": {
        "title": "ProfileInDb",
        "required": [
          "user_id",
          "source_id",
          "id"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "priority_id": {
            "title": "Priority Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          }
        }
      },
      "ProviderLinkResponse": {
        "title": "ProviderLinkResponse",
        "required": [
          "provider",
          "connected"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/PasswordProviders"
          },
          "connected": {
            "title": "Connected",
            "type": "boolean"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          }
        },
        "example": {
          "provider": "zwift",
          "connected": true,
          "provider_id": "<provider_id>"
        }
      },
      "Providers": {
        "title": "Providers",
        "enum": [
          "oura",
          "fitbit",
          "garmin",
          "whoop",
          "strava",
          "renpho",
          "peloton",
          "wahoo",
          "zwift",
          "freestyle_libre",
          "eight_sleep",
          "withings",
          "apple_health_kit",
          "manual",
          "ihealth",
          "google_fit",
          "beurer_api",
          "beurer_ble",
          "omron_ble",
          "accuchek_ble",
          "contour_ble"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "QuantitySample": {
        "title": "QuantitySample",
        "required": [
          "value",
          "start_date",
          "end_date",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "source_bundle": {
            "title": "Source Bundle",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        }
      },
      "RawActivity": {
        "title": "Activity Data",
        "required": [
          "activity"
        ],
        "type": "object",
        "properties": {
          "activity": {
            "title": "Activity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityV2InDB"
            }
          }
        },
        "example": {
          "activity": [
            {
              "timestamp": "2022-05-16T11:31:30.403317+00:00",
              "data": {
                "data": "...provider_specific_data"
              },
              "provider_id": "254c4e1b-fe9c-4042-a836-d9852f24f353",
              "user_id": "96babad9-bc72-462f-93c5-c55d5391b855",
              "source_id": 1,
              "priority_id": 1
            }
          ]
        }
      },
      "RawBody": {
        "title": "Body Data",
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "title": "Body",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BodyV2InDB"
            }
          }
        },
        "example": {
          "body": [
            {
              "timestamp": "2022-05-16T11:31:30.406015+00:00",
              "data": {
                "data": "...provider_specific_data"
              },
              "provider_id": "a0285bac-11cd-4e0d-9ecf-b95558c101ca",
              "user_id": "5ee421bc-4aa6-43ac-8962-8c9226c960fb",
              "source_id": 1,
              "priority_id": 1
            }
          ]
        }
      },
      "RawDevices": {
        "title": "Raw Devices Data",
        "required": [
          "devices"
        ],
        "type": "object",
        "properties": {
          "devices": {
            "title": "Devices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceV2InDB"
            }
          }
        },
        "example": {
          "devices": [
            {
              "data": {
                "data": "...provider_specific_data"
              },
              "provider_id": "c12f9e99-337d-4149-96ba-0c88704dd268",
              "user_id": "d78bb3b3-9ef9-4a5b-997f-0ecff8a0dbda",
              "source_id": 1
            }
          ]
        }
      },
      "RawProfile": {
        "title": "Profile Data",
        "required": [
          "profile"
        ],
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ProfileInDb"
          }
        },
        "example": {
          "profile": [
            {
              "data": {
                "data": "...provider_specific_data"
              },
              "provider_id": "3fd13598-e8c8-42ca-8b13-adaabaab7e9b",
              "user_id": "af995ad0-c1f5-4c0e-9c09-f787e7c35f77",
              "source_id": 1
            }
          ]
        }
      },
      "RawSleep": {
        "title": "Raw Sleep data",
        "required": [
          "sleep"
        ],
        "type": "object",
        "properties": {
          "sleep": {
            "title": "Sleep",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SleepV2InDB"
            }
          }
        },
        "example": {
          "sleep": [
            {
              "timestamp": "2022-05-16T11:31:30.411814+00:00",
              "data": {
                "data": "...provider_specific_data"
              },
              "provider_id": "bd11399e-1451-4cba-b7a8-8cdabffeecc0",
              "user_id": "2bc70bd5-ee88-43fe-8503-4a2cd1003ee8",
              "source_id": 1,
              "priority_id": 1
            }
          ]
        }
      },
      "RawWorkout": {
        "title": "Workouts Data",
        "required": [
          "workouts"
        ],
        "type": "object",
        "properties": {
          "workouts": {
            "title": "Workouts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkoutV2InDB"
            }
          }
        },
        "example": {
          "workouts": [
            {
              "timestamp": "2022-05-16T11:31:30.416445+00:00",
              "data": {
                "provider_specific": "..._data"
              },
              "provider_id": "099c1ec5-6fb6-4954-84a8-068f468033db",
              "user_id": "359e4f4b-1d6d-4f84-a5e2-5172d05ea51b",
              "source_id": 1,
              "priority_id": 1,
              "sport_id": 3
            }
          ]
        }
      },
      "Resource": {
        "title": "Resource",
        "enum": [
          "workouts",
          "activity",
          "sleep",
          "body",
          "workouts/stream",
          "sleep/stream",
          "profile",
          "blood_pressure",
          "blood_oxygen",
          "glucose",
          "heartrate"
        ],
        "description": "An enumeration."
      },
      "SleepV2InDB": {
        "title": "SleepV2InDB",
        "required": [
          "timestamp",
          "provider_id",
          "user_id",
          "source_id",
          "id",
          "source"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "priority_id": {
            "title": "Priority Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          },
          "priority": {
            "title": "Priority",
            "type": "integer"
          }
        }
      },
      "Source": {
        "title": "Provider",
        "required": [
          "name",
          "slug",
          "description",
          "logo",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "logo": {
            "title": "Logo",
            "type": "string"
          },
          "group": {
            "title": "Group",
            "type": "string"
          },
          "oauth_url": {
            "title": "Oauth Url",
            "type": "string"
          },
          "auth_type": {
            "title": "Auth Type",
            "type": "string",
            "default": "oauth"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean",
            "default": true
          },
          "id": {
            "title": "Id",
            "type": "integer"
          }
        },
        "example": {
          "name": "Garmin",
          "slug": "hamin",
          "logo": "https://garmin.com",
          "description": "Garmin Watches",
          "oauth_url": "https://garmin_aouth_url.com",
          "auth_type": "oauth",
          "id": 1
        }
      },
      "TestkitClientFacing": {
        "title": "TestkitClientFacing",
        "required": [
          "id",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Testkit name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Testkit decription"
          },
          "markers": {
            "title": "Markers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkerClientFacing"
            },
            "description": "The lab markers that test kit tests for",
            "default": []
          },
          "turnaround_time_lower": {
            "title": "Turnaround Time Lower",
            "type": "integer",
            "description": "Turnaround time lower in days"
          },
          "turnaround_time_upper": {
            "title": "Turnaround Time Upper",
            "type": "integer",
            "description": "Turnaround time upper in days"
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "Price of testkit in dollars"
          }
        }
      },
      "TimeseriesResource": {
        "title": "TimeseriesResource",
        "enum": [
          "ige",
          "igg",
          "cholesterol",
          "cholesterol/total",
          "cholesterol/ldl",
          "cholesterol/hdl",
          "cholesterol/triglycerides",
          "glucose",
          "heartrate",
          "blood_pressure",
          "blood_oxygen"
        ],
        "description": "An enumeration."
      },
      "UserCreateBody": {
        "title": "UserCreateBody",
        "required": [
          "client_user_id"
        ],
        "type": "object",
        "properties": {
          "client_user_id": {
            "title": "Client User Id",
            "type": "string",
            "description": "A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id."
          }
        }
      },
      "UserRefreshErrorResponse": {
        "title": "UserRefreshErrorResponse",
        "required": [
          "success",
          "user_id",
          "error"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "enum": [
              false
            ],
            "type": "boolean",
            "description": "Whether operation was successful or not"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "error": {
            "title": "Error",
            "type": "string"
          },
          "failed_sources": {
            "title": "Failed Sources",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "success": false,
          "user_id": "d0d0660c-6d5e-4649-af14-ffc50be7107e",
          "error": "user has no connected sources",
          "failed_sources": []
        }
      },
      "UserRefreshSuccessResponse": {
        "title": "UserRefreshSuccessResponse",
        "required": [
          "success",
          "user_id",
          "refreshed_sources",
          "failed_sources"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "enum": [
              true
            ],
            "type": "boolean",
            "description": "Whether operation was successful or not"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "refreshed_sources": {
            "title": "Refreshed Sources",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failed_sources": {
            "title": "Failed Sources",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "success": true,
          "user_id": "5986e665-1321-4dff-94bb-32e8311286b6",
          "refreshed_sources": [
            "Withings/workouts",
            "Withings/sleep",
            "Withings/body",
            "Withings/vitals/blood_pressure",
            "Withings/activity"
          ],
          "failed_sources": [
            "Oura/sleep"
          ]
        }
      },
      "UserSuccessResponse": {
        "title": "UserSuccessResponse",
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "type": "boolean",
            "description": "Whether operation was successful or not"
          }
        },
        "example": {
          "success": true
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "VitalsResource": {
        "title": "VitalsResource",
        "enum": [
          "blood_pressure",
          "blood_oxygen",
          "glucose"
        ],
        "description": "An enumeration."
      },
      "WorkoutV2InDB": {
        "title": "WorkoutV2InDB",
        "required": [
          "timestamp",
          "provider_id",
          "user_id",
          "source_id",
          "id",
          "sport_id",
          "source",
          "sport"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "title": "Data",
            "type": "string",
            "format": "json-string"
          },
          "provider_id": {
            "title": "Provider Id",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "title": "Source Id",
            "type": "integer"
          },
          "priority_id": {
            "title": "Priority Id",
            "type": "integer"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "sport_id": {
            "title": "Sport Id",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/ClientFacingSource"
          },
          "sport": {
            "$ref": "#/components/schemas/ClientFacingSport"
          }
        }
      }
    }
  }
}
